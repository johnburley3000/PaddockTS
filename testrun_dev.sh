#!/bin/bash
# This script runs a development version of the PaddockTS program
# Set the core parameters and then run the python scripts in serial. 

## Config:
# specify working directory and storage directory:
wd=/home/106/jb5097/Projects/PaddockTS
dir=/g/data/xe2/John/Data/PadSeg/
tmpdir=/scratch/xe2/jb5097/tmp  

# params to specify Region/Timeframe of interest
stub=TEST8 # e.g. <site name>_<buffer>_<years>
lat=-37.1856746323413
lon=143.8202752762509
buffer=0.01 #this distance in all directions from (lat,lon). 0.01 degrees is ~1km in each direction which woul mean 2kmx2km total
start='2023-01-01'
end='2024-12-31'

# specify which SAMgeo model to use (see here: https://github.com/facebookresearch/segment-anything?tab=readme-ov-file#model-checkpoints)
samgeo_model='sam_vit_h_4b8939.pth'

# params for paddock filtering
min_area_ha=10
max_area_ha=1500
max_perim_area_ratio=40

# check if model exists and download it if not, then download it to tmp
if [ -f "${tmpdir}/${samgeo_model}" ]; then
  echo "SAMGeo Model found: ${tmpdir}/${samgeo_model}"  
else
  echo "SAMGeo Model not found: ${tmpdir}/${samgeo_model}"
  echo "Downloading model from https://dl.fbaipublicfiles.com/segment_anything/${samgeo_model}..."
  wget "https://dl.fbaipublicfiles.com/segment_anything/${samgeo_model}" -O "${tmpdir}/${samgeo_model}"
  if [ $? -eq 0 ]; then
    echo "Download samgeo complete."
  else
    echo "Download samgeo failed."
    exit 1
  fi
fi

# Run scripts

## 1. Download Sentinel-2 data
# Setup DEA environment modules for running the Python script
module use /g/data/v10/public/modules/modulefiles
module load dea/20231204
python Code/01_get_Sentinel2_DEA.py \
    --stub $stub \
    --outdir $dir \
    --lat $lat \
    --lon $lon \
    --buffer $buffer \
    --start_time $start \
    --end_time $end
module purge
# Results: 
# Pickle file representing an xarray object of time series Sentinel2 data downloaded from DEA (<stub>_ds2.pkl)
# Some metadata about the download (<stub>_ds2_query.pkl)

## 2. Download Sentinel-1 data
# The current version will obtain RIO/RIO from the ds2_query.pkl file generated by Code/01_getSentinel2_DEA.py
source /g/data/xe2/John/geospatenv/bin/activate
python Code/download_S1.py $stub $dir
# Results: 
# Pickle file representing an xarray object of time series Sentinel1 data downloaded from RIO (<stub>_ds1.pkl)
# Note: some processed steps required. 
# Issue: I get random network errors on some runs. Seems that certain scenes are included in the order but then can't be accessed, so it quits. 

## 3. calculate indices (and vegetation fractional cover)
# This seems to screw up if the modules and python env are not loaded in the right order. Dependency on tensorflow2.15.0 will become an issue for portability
deactivate
module load tensorflow/2.15.0 # req for veg frac model
source /g/data/xe2/John/geospatenv/bin/activate
python3 Code/02_indices-vegfrac.py --stub $stub --outdir $dir
module purge
deactivate
# Results:
# (<stub>_ds2.pkl) updated with vegetation indices and vegetation fractional cover.

## 4. Segment paddocks
source /g/data/xe2/John/geospatenv/bin/activate
python3 Code/03_segment_paddocks.py $stub $dir \
    --model $tmpdir/$samgeo_model \
    --min_area_ha $min_area_ha \
    --max_area_ha $max_area_ha \
    --max_perim_area_ratio $max_perim_area_ratio
# Results:
# a 3-band image representing Fourier Transform of NDWI time series (<stub>.tif)
# an image showing thesegmentaiton mask (<stub>_segment.tif)
# a shapefile of the paddocks (<stub>_segment.gpkg)
# a shapefile of the paddocks after filtering (<stub>_filt.gpkg) [CHANGE THIS TO <stub>_segment_filt.gpkg]

## 5. Get environmental variables
deactivate
module load gdal/3.6.4
source /g/data/xe2/John/geospatenv/bin/activate
python3 Code/04_environmental.py \
    --stub $stub \
    --outdir $dir \
    --tmpdir $tmpdir \
    --lat $lat \
    --lon $lon \
    --buffer $buffer \
    --start_time $start \
    --end_time $end
module purge
deactivate
# Results:
# <describe here>

## Checkpoint plots.
module load ffmpeg/4.3.1 # for .mp4 generation
source /g/data/xe2/John/geospatenv/bin/activate
python3 Code/checkpoint_plots.py $stub $dir
# Results:
# Set of plots with <stub>_<plot-description>.tif

## 6. Calculate paddock time series
# IN PREP.

## Feature Extraction???
# This is where we will implement functions to estimate things like SoS, EoS, flowering time, from the paddock-level time series data. 

## 7. Generate more outputs
# IN PREP.